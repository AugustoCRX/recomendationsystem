import pandas as pd
import numpy as np
import streamlit as st
import time 

from sklearn.metrics.pairwise import cosine_similarity

#Leitura dos dados
df = pd.read_csv(r"C:\UNDB\ESTRUTURA_DE_DADOS_AVAN√áADOS\Github\recomendationsystem\DADOS\spotify_songs.csv").dropna().drop_duplicates(subset="track_name").reset_index(drop=True)
reorder_list = df.columns.tolist()
reorder_list.remove("track_name")
reorder_list.insert(0,"track_name")
df = df[reorder_list]
prep_df = df.copy()

#Classe do sistema de recomenda√ß√£o
class RecomendationSystem():
    def __init__(self, sample):
        self.sample = sample
    #M√©todo respons√°vel por calcular a similaridade de cosseno
    def calculate_cosine(self):
        #Separa√ß√£o dos dummies
        dummies = prep_df[prep_df.columns[22::]]
        #Sera√ß√£o da coluna que ser√° utilizada como parametro
        danceability = prep_df[prep_df.columns[11]]
        #Uni√£o dos dummies com a coluna par√¢metro
        df_cosine_calculation = pd.concat([dummies,danceability], axis = 1)
        #Reshape da tabela para que seja poss√≠vel executar a cosine similarity
        df_sample = np.array(df_cosine_calculation.iloc[self.sample]).reshape(1, -1)
        cosine_column = cosine_similarity(df_cosine_calculation, df_sample)
        #Adiciona a coluna ao dataframe
        df['Cosine_Dist'] = cosine_column
        return df
    #M√©todo respons√°vel por executar dijkstra na aplica√ß√£o
    def dijkstra(self):
        df_cosine = self.calculate_cosine()
        distances = df['Cosine_Dist']
        distance_dict = {i:10**7 for i in range(len(distances))}
        #Armazena as dist√¢ncias dentro de uma lista
        for i in range(len(distances)):
            distance_dict[i] = 1/distances[i] #Formula para c√°lculo das dist√¢ncias
        #Reconstroi o dicion√°rio com as dist√¢ncias reordenadas
        distance_dict = dict(sorted(distance_dict.items(), key = lambda item: item[1], reverse=False))
        # Reordenar DataFrame baseado nas dist√¢ncias
        df_new_order = [i for i in distance_dict]
        df_teste_sorted = df_cosine.iloc[df_new_order]
        return df_teste_sorted

# Entrada de texto para o filtro
entrada_usuario = st.text_input("Digite o nome da m√∫sica:")

# Filtrar os nomes que contenham o texto digitado (ignora mai√∫sculas/min√∫sculas)
opcoes_filtradas = prep_df[prep_df['track_name'].str.contains(entrada_usuario, case=False)]

# Dropdown exibindo apenas as op√ß√µes filtradas
escolha = st.selectbox("Selecione um nome:", opcoes_filtradas)

#Bot√£o para execu√ß√£o do c√≥digo de dijkstra
if st.button("Procure m√∫sicas parecidas!"):
    application_start = time.time()
    # Executar o c√≥digo de dijkstra e buscar o √≠ndice selecionado
    recomendation = RecomendationSystem(np.where(prep_df['track_name'] == escolha))
    df_recommendation = recomendation.dijkstra()
    st.write("M√∫sicas que fazem o seu tipo!")
    df_show = df_recommendation.head(11).loc[df["track_name"] != escolha, ["track_name","track_artist","track_album_name","playlist_name","track_id"]].rename(columns=
        {"track_name":"Nome da m√∫sica",
         "track_artist":"Nome do artista",
         "track_album_name": "Nome do album",
         "playlist_name":"Nome da playlist",
         "track_id":"ID da m√∫sica"}
        )

    st.dataframe(df_show)
    col1, col2 = st.columns([5, 1])
    with col1:
    # Loop para exibir as m√∫sicas como strings formatadas
        for index, row in df_show.iterrows():
            nome_musica = row['Nome da m√∫sica']
            
            # Exibir as informa√ß√µes da m√∫sica como texto formatado
            st.write(f"""
            **M√∫sica**: {nome_musica}
            """)
    with col2:
        for index, row in df_show.iterrows():
            # Cria um link que abrir√° a m√∫sica no Spotify
            music_id = row['ID da m√∫sica']
            spotify_link = f"https://open.spotify.com/track/{music_id}"
            
            # Bot√£o que leva ao link do Spotify
            st.markdown(f"[üîà]({spotify_link})", unsafe_allow_html=True)
    #Finaliza√ß√£o do tempo de execu√ß√£o
    st.write(f"O tempo de execu√ß√£o da aplica√ß√£o √© de {(time.time() - application_start):.2f} segundos")
